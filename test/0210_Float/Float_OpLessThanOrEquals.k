// generated by kimio kurmaitsu

import("Type.Float");

int succ(int n) {
	return n+1;
}

float minus(float n) {
	return -n;
}
    


void test() {
	int int2 = 2;
	float pi = 3.14159;;
	boolean btrue = true;
	assert((2 <= 2) == true);
	assert((2 <= pi) == true);
	assert((2 <= succ(1)) == true);
	assert((2 <= -pi) == false);
	assert((2 <= minus(-1.63)) == false);
	assert((2 <= int2 + 1.0) == true);
	assert((2 <= pi - int2) == false);
	assert((2 <= 3.14159) == true);
	assert((2 <= pi / 12) == false);
	assert((pi <= 2) == false);
	assert((pi <= pi) == true);
	assert((pi <= succ(1)) == false);
	assert((pi <= -pi) == false);
	assert((pi <= minus(-1.63)) == false);
	assert((pi <= int2 + 1.0) == false);
	assert((pi <= pi - int2) == false);
	assert((pi <= 3.14159) == true);
	assert((pi <= pi / 12) == false);
	assert((succ(1) <= 2) == true);
	assert((succ(1) <= pi) == true);
	assert((succ(1) <= succ(1)) == true);
	assert((succ(1) <= -pi) == false);
	assert((succ(1) <= minus(-1.63)) == false);
	assert((succ(1) <= int2 + 1.0) == true);
	assert((succ(1) <= pi - int2) == false);
	assert((succ(1) <= 3.14159) == true);
	assert((succ(1) <= pi / 12) == false);
	assert((-pi <= 2) == true);
	assert((-pi <= pi) == true);
	assert((-pi <= succ(1)) == true);
	assert((-pi <= -pi) == true);
	assert((-pi <= minus(-1.63)) == true);
	assert((-pi <= int2 + 1.0) == true);
	assert((-pi <= pi - int2) == true);
	assert((-pi <= 3.14159) == true);
	assert((-pi <= pi / 12) == true);
	assert((minus(-1.63) <= 2) == true);
	assert((minus(-1.63) <= pi) == true);
	assert((minus(-1.63) <= succ(1)) == true);
	assert((minus(-1.63) <= -pi) == false);
	assert((minus(-1.63) <= minus(-1.63)) == true);
	assert((minus(-1.63) <= int2 + 1.0) == true);
	assert((minus(-1.63) <= pi - int2) == false);
	assert((minus(-1.63) <= 3.14159) == true);
	assert((minus(-1.63) <= pi / 12) == false);
	assert((int2 + 1.0 <= 2) == false);
	assert((int2 + 1.0 <= pi) == true);
	assert((int2 + 1.0 <= succ(1)) == false);
	assert((int2 + 1.0 <= -pi) == false);
	assert((int2 + 1.0 <= minus(-1.63)) == false);
	assert((int2 + 1.0 <= int2 + 1.0) == true);
	assert((int2 + 1.0 <= pi - int2) == false);
	assert((int2 + 1.0 <= 3.14159) == true);
	assert((int2 + 1.0 <= pi / 12) == false);
	assert((pi - int2 <= 2) == true);
	assert((pi - int2 <= pi) == true);
	assert((pi - int2 <= succ(1)) == true);
	assert((pi - int2 <= -pi) == false);
	assert((pi - int2 <= minus(-1.63)) == true);
	assert((pi - int2 <= int2 + 1.0) == true);
	assert((pi - int2 <= pi - int2) == true);
	assert((pi - int2 <= 3.14159) == true);
	assert((pi - int2 <= pi / 12) == false);
	assert((3.14159 <= 2) == false);
	assert((3.14159 <= pi) == true);
	assert((3.14159 <= succ(1)) == false);
	assert((3.14159 <= -pi) == false);
	assert((3.14159 <= minus(-1.63)) == false);
	assert((3.14159 <= int2 + 1.0) == false);
	assert((3.14159 <= pi - int2) == false);
	assert((3.14159 <= 3.14159) == true);
	assert((3.14159 <= pi / 12) == false);
	assert((pi / 12 <= 2) == true);
	assert((pi / 12 <= pi) == true);
	assert((pi / 12 <= succ(1)) == true);
	assert((pi / 12 <= -pi) == false);
	assert((pi / 12 <= minus(-1.63)) == true);
	assert((pi / 12 <= int2 + 1.0) == true);
	assert((pi / 12 <= pi - int2) == true);
	assert((pi / 12 <= 3.14159) == true);
	assert((pi / 12 <= pi / 12) == true);
}

test();
