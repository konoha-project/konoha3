/* This file was automatically generated by CreateArithmeticInst.k. Do not edit! */
#ifndef FuelVMInst__H
#define FuelVMInst__H

static inline SValue Add_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Add(arg0.ival, arg1.ival);
	return val;
}

static inline SValue Sub_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Sub(arg0.ival, arg1.ival);
	return val;
}

static inline SValue Mul_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Mul(arg0.ival, arg1.ival);
	return val;
}

static inline SValue Div_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Div(arg0.ival, arg1.ival);
	return val;
}

static inline SValue Eq_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Eq(arg0.ival, arg1.ival);
	return val;
}

static inline SValue Nq_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Nq(arg0.ival, arg1.ival);
	return val;
}

static inline SValue Gt_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Gt(arg0.ival, arg1.ival);
	return val;
}

static inline SValue Ge_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Ge(arg0.ival, arg1.ival);
	return val;
}

static inline SValue Lt_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Lt(arg0.ival, arg1.ival);
	return val;
}

static inline SValue Le_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Le(arg0.ival, arg1.ival);
	return val;
}

static inline SValue Add_int_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Add(arg0.ival, arg1.fval);
	return val;
}

static inline SValue Sub_int_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Sub(arg0.ival, arg1.fval);
	return val;
}

static inline SValue Mul_int_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Mul(arg0.ival, arg1.fval);
	return val;
}

static inline SValue Div_int_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Div(arg0.ival, arg1.fval);
	return val;
}

static inline SValue Eq_int_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Eq(arg0.ival, arg1.fval);
	return val;
}

static inline SValue Nq_int_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Nq(arg0.ival, arg1.fval);
	return val;
}

static inline SValue Gt_int_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Gt(arg0.ival, arg1.fval);
	return val;
}

static inline SValue Ge_int_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Ge(arg0.ival, arg1.fval);
	return val;
}

static inline SValue Lt_int_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Lt(arg0.ival, arg1.fval);
	return val;
}

static inline SValue Le_int_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Le(arg0.ival, arg1.fval);
	return val;
}

static inline SValue Add_float_int(SValue arg0, SValue arg1)
{
	SValue val; val.fval = __Add(arg0.fval, arg1.ival);
	return val;
}

static inline SValue Sub_float_int(SValue arg0, SValue arg1)
{
	SValue val; val.fval = __Sub(arg0.fval, arg1.ival);
	return val;
}

static inline SValue Mul_float_int(SValue arg0, SValue arg1)
{
	SValue val; val.fval = __Mul(arg0.fval, arg1.ival);
	return val;
}

static inline SValue Div_float_int(SValue arg0, SValue arg1)
{
	SValue val; val.fval = __Div(arg0.fval, arg1.ival);
	return val;
}

static inline SValue Eq_float_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Eq(arg0.fval, arg1.ival);
	return val;
}

static inline SValue Nq_float_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Nq(arg0.fval, arg1.ival);
	return val;
}

static inline SValue Gt_float_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Gt(arg0.fval, arg1.ival);
	return val;
}

static inline SValue Ge_float_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Ge(arg0.fval, arg1.ival);
	return val;
}

static inline SValue Lt_float_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Lt(arg0.fval, arg1.ival);
	return val;
}

static inline SValue Le_float_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Le(arg0.fval, arg1.ival);
	return val;
}

static inline SValue Add_float_float(SValue arg0, SValue arg1)
{
	SValue val; val.fval = __Add(arg0.fval, arg1.fval);
	return val;
}

static inline SValue Sub_float_float(SValue arg0, SValue arg1)
{
	SValue val; val.fval = __Sub(arg0.fval, arg1.fval);
	return val;
}

static inline SValue Mul_float_float(SValue arg0, SValue arg1)
{
	SValue val; val.fval = __Mul(arg0.fval, arg1.fval);
	return val;
}

static inline SValue Div_float_float(SValue arg0, SValue arg1)
{
	SValue val; val.fval = __Div(arg0.fval, arg1.fval);
	return val;
}

static inline SValue Eq_float_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Eq(arg0.fval, arg1.fval);
	return val;
}

static inline SValue Nq_float_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Nq(arg0.fval, arg1.fval);
	return val;
}

static inline SValue Gt_float_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Gt(arg0.fval, arg1.fval);
	return val;
}

static inline SValue Ge_float_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Ge(arg0.fval, arg1.fval);
	return val;
}

static inline SValue Lt_float_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Lt(arg0.fval, arg1.fval);
	return val;
}

static inline SValue Le_float_float(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Le(arg0.fval, arg1.fval);
	return val;
}

static inline SValue Mod_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Mod(arg0.ival, arg1.ival);
	return val;
}

static inline SValue LShift_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __LShift(arg0.ival, arg1.ival);
	return val;
}

static inline SValue RShift_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __RShift(arg0.ival, arg1.ival);
	return val;
}

static inline SValue And_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __And(arg0.ival, arg1.ival);
	return val;
}

static inline SValue Or_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Or(arg0.ival, arg1.ival);
	return val;
}

static inline SValue Xor_int_int(SValue arg0, SValue arg1)
{
	SValue val; val.ival = __Xor(arg0.ival, arg1.ival);
	return val;
}

#endif /* end of include guard */
