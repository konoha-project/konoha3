/****************************************************************************
 * Copyright (c) 2012, Masahiro Ide <ide@konohascript.org> All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************/

import("java2.string");
import("konoha.foreach");
import("konoha.ns");
import("js4.array");
import("konoha.file");
import("konoha.class");
import("cstyle");
import("konoha.field", ".");

void emit(String path, String data) {
    FILE file = new FILE(path, "w");
    file.print("/* This file was automatically generated by GenLIR.k. Do not edit! */\n");
    file.print("#ifndef FuelVMInst__H\n");
    file.print("#define FuelVMInst__H\n\n");
    file.print(data);
    file.print("#endif /* end of include guard */");
}
String field(String ty) {
    if(ty == "int") {
        return "ival";
    } else if(ty == "float") {
        return "fval";
    } else if(ty == "bool") {
        return "bval";
    }
}
String createop(String retTy, String leftTy, String rightTy, String op) {
    String ret   = field(retTy);
    String left  = field(leftTy);
    String right = field(rightTy);
    String line = "static inline SValue ${op}_${leftTy}_${rightTy}(SValue arg0, SValue arg1)\n";
    line = line + "{\n";
    line = line + "\tSValue val; val.${ret} = __${op}(arg0.${left}, arg1.${right});\n";
    line = line + "\treturn val;\n";
    line = line + "}\n\n";
    return line;
}

void main (String[] args) {
    int i = 0;
    String[] types = ["int", "float"];
    String[] binary = ["Add", "Sub", "Mul", "Div"];
    String[] int_binary = ["Mod", "LShift", "RShift", "And", "Or", "Xor"];
    String[] float_binary = [];
    String[] compare = ["Eq", "Nq", "Gt", "Ge", "Lt", "Le"];

    String line = "";
    while (i < types.length) {
        int j = 0;
        while (j < types.length) {
            String ltype = types.get(i);
            String rtype = types.get(j);
            int k = 0;
            while (k < binary.length) {
                String op = binary.get(k);
                line = line + createop(ltype, ltype, rtype, op);
                k = k + 1;
            }
            k = 0;
            while (k < compare.length) {
                String op = compare.get(k);
                line = line + createop("bool", ltype, rtype, op);
                k = k + 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    i = 0;
    while (i < int_binary.length) {
        String op = int_binary.get(i);
        line = line + createop("int", "int", "int", op);
        i = i + 1;
    }
    emit("FuelVMInst_.h", line);
}

main([]);
